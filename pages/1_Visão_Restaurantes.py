import streamlit as st
import folium
from streamlit_folium import folium_static
import pandas as pd
import numpy as np
import plotly.express as px
import folium as fl
import warnings
import datetime
from haversine import haversine, Unit
from PIL import Image
import plotly.graph_objects as go

# Desabilita todos os avisos
warnings.simplefilter("ignore")

st.set_page_config(
    page_title = "Vis√£o Restaurantes",
    page_icon = "üçΩÔ∏è",
    layout = 'wide'
)

#=====================================================================================================================

# FUN√á√ïES MODULARES

#=====================================================================================================================

def distance_distribution( df ):
    """
    Esta fun√ß√£o constr√≥i um novo DataFrame com o tempo m√©dio de entrega e o desvio padr√£o deste tempo, agrupados por cidade e por tipo de pedido.

    Par√¢metros:
    - df: DataFrame com as colunas 'City', 'Time_taken(min)' e 'Type_of_order'.

    Retorno:
    _ df_aux: um novo DataFrame com o tempo m√©dio e o desvio padr√£o do tempo das entregas.
    """
    df_aux = (df1.loc[:, ['City', 'Time_taken(min)', 'Type_of_order']]
                 .groupby(['City', 'Type_of_order'])
                 .agg({'Time_taken(min)':['mean', 'std']}))
    
    df_aux.columns = ['avg_time', 'std_time']
    df_aux = df_aux.reset_index()
    return( df_aux )
    
def sunburst_chart( df ):
    """
    Esta fun√ß√£o retorna um gr√°fico ao estilo 'sunburst' com a distribui√ß√£o do tempo de entrega por cidade e densidade
    de tr√°fego.

    Par√¢metros:
    - df: DataFrame com as colunas 'City', 'Time_taken(min)' e 'Road_traffic_density'.

    Retorno:
    - Um gr√°fico ao estilo 'sunburst' com a distribui√ß√£o do tempo de entrega por cidade e densidade de tr√°fego.
    """
    df_aux = ( df1.loc[:, ['City', 'Time_taken(min)', 'Road_traffic_density']]
                  .groupby(['City', 'Road_traffic_density'])
                  .agg({'Time_taken(min)' : ['mean', 'std']}) )

    df_aux.columns = ['avg_time', 'std_time']
    df_aux = df_aux.reset_index()

    fig = px.sunburst(df_aux, path = ['City', 'Road_traffic_density'], 
                      values = 'avg_time', color = 'std_time', 
                      color_continuous_scale = 'RdBu', 
                      color_continuous_midpoint = np.average(df_aux['std_time']))
    return( fig )
    
def bar_chart( df ):
    """
    Esta fun√ß√£o retorna um gr√°fico de barras com a distribui√ß√£o do tempo, por cidade.

    Par√¢metros:
    - df: DataFrame com as colunas 'City' e 'Time_taken(min)'.

    Retorno:
    - Um gr√°fico de barras com a distribui√ß√£o do tempo de entrega por cidade.
    """
    df_aux = (df1.loc[:, ['City', 'Time_taken(min)']]
                 .groupby('City')
                 .agg({'Time_taken(min)':['mean', 'std']}))
    df_aux.columns = ['avg_time', 'std_time']
    df_aux = df_aux.reset_index()

    fig = go.Figure()
    fig.add_trace(go.Bar(name = 'control', 
                         x = df_aux['City'], y = df_aux['avg_time'], 
                         error_y = dict(type = 'data', 
                                        array = df_aux['std_time'])))
    fig.update_layout(barmode = 'group')
    return( fig )
            
def section_chart( df ):
    """
    Esta fun√ß√£o retorna um gr√°fico de se√ß√£o com o tempo m√©dio de entrega por cidade.

    Par√¢metros:
    - df: DataFrame com as colunas 'Restaurant_latitude', 'Restaurant_longitude', 'Delivery_location_latitude',      'Delivery_location_longitude'.

    Retorno:
    - Gr√°fico de se√ß√£o com o tempo m√©dio de entrega por cidade.
    """
    
    cols = ([ 'Restaurant_latitude', 
              'Restaurant_longitude', 
              'Delivery_location_latitude', 
              'Delivery_location_longitude' ])

    df1[ 'distance' ] = df1.loc[ :, cols].apply( lambda x :  haversine( (x['Restaurant_latitude'], 
                                                                         x['Restaurant_longitude']), 
                                                                        (x['Delivery_location_latitude'], 
                                                                         x['Delivery_location_longitude']), 
                                                                         unit = Unit.KILOMETERS), axis = 1)
    avg_distance = df1.loc[:, ['City', 'distance']].groupby('City').mean().reset_index()
    fig = go.Figure(data = [go.Pie(labels = avg_distance['City'], 
                                   values = avg_distance['distance'], 
                                   pull = [0, 0.1, 0])])
    return( fig )


def mean_std_time_festival(df, funcao='mean', Festival=True):
    """
    Fun√ß√£o que calcula o tempo m√©dio ou o desvio padr√£o do tempo das entregas,
    durante ou fora do per√≠odo de festival.

    Par√¢metros:
    - df: DataFrame com as colunas 'Time_taken(min)' e 'Festival'
    - funcao: 'mean' para m√©dia ou 'std' para desvio padr√£o
    - Festival: True para entregas durante o festival, False para fora dele

    Retorno:
    - Valor float com 2 casas decimais, de acordo com a fun√ß√£o e condi√ß√£o escolhidas
    """
    
    df_aux = (df.loc[:, ['Time_taken(min)', 'Festival']]
                .groupby('Festival')
                .agg({'Time_taken(min)': ['mean', 'std']}))

    df_aux.columns = ['avg_time', 'std_time']
    df_aux = df_aux.reset_index()

    # Define a linha do DataFrame com base na escolha do festival
    if Festival:
        condicao = 'Yes'
    else:
        condicao = 'No'

    # Aplica a fun√ß√£o escolhida
    if funcao == 'mean':
        resultado = np.round(df_aux.loc[df_aux['Festival'] == condicao, 'avg_time'], 2)
    elif funcao == 'std':
        resultado = np.round(df_aux.loc[df_aux['Festival'] == condicao, 'std_time'], 2)
    else:
        raise ValueError("A fun√ß√£o deve ser 'mean' ou 'std'.")

    return resultado.values[0]  # retorna apenas o n√∫mero, n√£o uma Series


def distancia_media( df ):
    """
        Fun√ß√£o que calcula a dist√¢ncia m√©dia das entregas tomando como refer√™ncia a localiza√ß√£o dos restaurantes e das entregas.

        Par√¢metros:
        - df: DataFrame.

        Retorna:
        - A dist√¢ncia m√©dia das entregas em rela√ß√£o √† localiza√ß√£o dos restaurantes.
    """
    cols = ([ 'Restaurant_latitude', 
             'Restaurant_longitude', 
             'Delivery_location_latitude', 
             'Delivery_location_longitude' ])
    
    df1[ 'distance' ] = df.loc[ :, cols].apply( lambda x :  haversine( (x['Restaurant_latitude'], 
                                                                         x['Restaurant_longitude']), 
                                                                        (x['Delivery_location_latitude'], 
                                                                         x['Delivery_location_longitude']), 
                                                                        unit = Unit.KILOMETERS), axis = 1)
    
    # C√°lculo da m√©dia da dist√¢ncia das cidades
    distancia_media = df['distance'].mean()
    return ( distancia_media )

def clear_dataframe( df1 ):
    """
        Fun√ß√£o que provoca uma limpeza de nosso DataFrame: tirando espa√ßos, mudando os tipos de vari√°veis e dropando as linhas em que n√£o h√° dados.

        Par√¢metros:
        - df: Nosso DataFrame bruto.

        Retorna:
        - df: Novo DataFrame com todas as limpezas necess√°rias.        
    """
    # Vamos retirar os espa√ßos das strings:
    df1.loc[:,'ID'] = df1.loc[:,'ID'].str.strip()
    df1.loc[:,'Delivery_person_ID'] = df1.loc[:,'Delivery_person_ID'].str.strip()
    df1.loc[:,'Road_traffic_density'] = df1.loc[:,'Road_traffic_density'].str.strip()
    df1.loc[:,'Delivery_person_ID'] = df1.loc[:,'Delivery_person_ID'].str.strip()
    df1.loc[:,'Type_of_order'] = df1.loc[:,'Type_of_order'].str.strip()
    df1.loc[:,'Type_of_vehicle'] = df1.loc[:,'Type_of_vehicle'].str.strip()
    df1.loc[:,'Festival'] = df1.loc[:,'Festival'].str.strip()
    df1.loc[:,'City'] = df1.loc[:,'City'].str.strip()
    df1.loc[:,'multiple_deliveries'] = df1.loc[:,'multiple_deliveries'].str.strip()
    df1.loc[:,'Delivery_person_Age'] = df1.loc[:,'Delivery_person_Age'].str.strip()
    
    # Agora vamos retirar aquelas linhas em que n√£o h√° informa√ß√µes, para isso vamos usar uma condi√ß√£o nas linhas de todas as colunas e verificar em quantas linhas n√£o h√° informa√ß√µes
    linhas_selecionadas = df1.loc[ :, 'Delivery_person_Ratings' ] != 'NaN'
    df1 = df1.loc[ linhas_selecionadas, : ]
    linhas_selecionadas = df1[ 'multiple_deliveries' ] != 'NaN'
    df1 = df1.loc[ linhas_selecionadas, : ]
    linhas_selecionadas = df1[ 'Weatherconditions' ] != 'conditions NaN'
    df1 = df1.loc[ linhas_selecionadas, : ]
    linhas_selecionadas = df1[ 'Road_traffic_density' ] != 'NaN'
    df1 = df1.loc[ linhas_selecionadas, : ]
    linhas_selecionadas = df1[ 'City' ] != 'NaN'
    df1 = df1.loc[ linhas_selecionadas, : ]
    linhas_selecionadas = df1[ 'Festival' ] != 'NaN'
    df1 = df1.loc[ linhas_selecionadas, : ]
    linhas_selecionadas = df1[ 'Delivery_person_Age' ] != 'NaN'
    df1 = df1.loc[ linhas_selecionadas, : ]
    df1[ 'Time_taken(min)' ] = df1[ 'Time_taken(min)'].apply( lambda x: x.split( '(min) ')[1])
    df1[ 'Time_taken(min)' ] = df1[ 'Time_taken(min)'].astype( int ) 
    df1 = df1.reset_index( drop = True )
    
    # Vamos mudar os tipos de vari√°veis de algumas features que est√£o como 'object' e mudar a configura√ß√£o da data da coluna 'Order_Date'
    df1[ 'Delivery_person_Age' ] = df1[ 'Delivery_person_Age' ].astype( int )
    df1[ 'Delivery_person_Ratings' ] = df1[ 'Delivery_person_Ratings' ].astype( float )
    df1[ 'multiple_deliveries' ] = df1[ 'multiple_deliveries' ].astype( int )
    df1[ 'Order_Date' ] = pd.to_datetime( df1[ 'Order_Date' ], format = '%d-%m-%Y' )
    
    return( df1 )

#-----------------------------------IN√çCIO DA ESTRUTURA DO C√ìDIGO----------------------------------------
#--------------------------------------------------------------------------------------------------------
# O erro que estava ocorrendo e que me tomou um bom tempo, foi que eu n√£o havia chamado a fun√ß√£o 'clear_dataframe' # # para a limpeza, por isso o date_slider ainda estava com a estrutura de string, n√£o podendo ser comparada com o si-
# nal '>'.

# Lendo o nosso Dataframe:
df = pd.read_csv( '/home/marco/Marco/marco_ftc_python_jupiter_lab/train.csv' )
# marco_ftc_python/dataset/train.csv

# Primeiro fazemos a c√≥pia de nosso Dataframe para preservar os dados iniciais, se algo fora de nosso escopo ocorrer:
df1 = df.copy()

df1 = clear_dataframe( df1 )

#========================================================================================================
# LAYOUT DA BARRA LATERAL
#========================================================================================================

# Coloca√ß√£o do cabe√ßalho de nosso site de entregas de comida indiana:
st.header( 'Marketplace - Vis√£o Restaurantes' )

# Vamos colocar o nosso logotipo na barra lateral:
#image_path = 'logo.png'
#marco_ftc_python/projeto_ftc_dashboard/logo.png
image = Image.open('logo.png')
st.sidebar.image( image, width = 300 )

# Escrevendo o nome da empresa na barra lateral:
st.sidebar.markdown( '# Tasty Trials' )
st.sidebar.markdown( '# Fastest Delivery in the Town' )
st.sidebar.markdown( """___""" )

# Fazendo a sele√ß√£o de datas na barra lateral:
st.sidebar.markdown( '## Selecione a data limite:' )
date_slider = st.sidebar.slider("Qual √© a data para a visualiza√ß√£o?", 
                                     value = datetime.datetime( 2022, 4, 13 ), 
                                     min_value = datetime.datetime( 2022, 2, 11 ),
                                     max_value = datetime.datetime( 2022, 6, 4 ),
                                     format = 'DD-MM-YYYY')

if date_slider is not None:
    data_formatada = date_slider.strftime( "%d/%m/%Y" )
    st.header( f"Data selecionada: {data_formatada}" )
else:
    st.header( "Nenhuma data selecionada" )
st.sidebar.markdown("""___""")

# Criando uma choice box com as op√ß√µes de tipo de tr√°fego, para filtrar ainda mais os nossos gr√°ficos:
st.sidebar.markdown( '## Selecione o tipo de tr√°fego:' )
selecionados = st.sidebar.multiselect( "Qual √© o tipo de tr√°fego?", 
                                      [ 'Low', 'Medium', 'High', 'Jam' ], 
                                      default = [ 'Low', 'Medium', 'High', 'Jam' ] )
if selecionados:
    texto_formatado = ", ".join( selecionados )
    st.header( texto_formatado )
else:
    st.header( "Nenhuma op√ß√£o selecionada" )

st.sidebar.markdown("""___""")

# Escrevendo quem criou a p√°gina:
st.sidebar.markdown( '## Criado pela Comunidade DS :heart:' )

# Filtros de Datas
linhas_selecionadas = df1['Order_Date'] < date_slider
df1 = df1.loc[linhas_selecionadas, :]

# Filtros de Tipo de Tr√¢nsito
linhas_selecionadas = df1['Road_traffic_density'].isin( selecionados )
df1 = df1.loc[linhas_selecionadas, :]                                    

st.dataframe( df1 )

#===============================================================================
# LAYOUT DO STREAMLIT
#===============================================================================

# Primeiro criamos as abas das diferentes vis√µes poss√≠veis de nossa an√°lise
abas = [ 'Vis√£o Gerencial', '_', '_' ]
tab1, tab2, tab3 = st.tabs(abas)

# Aqui come√ßamos a construir a primeira aba
with tab1:
    # Separamos um espa√ßo que ir√° conter as nossas colunas e j√° definimos o t√≠tulo deste espa√ßo:
    with st.container():
        st.title( 'Overall Metrics' )
        
        # Constru√ß√£o das seis colunas
        col1, col2, col3, col4, col5, col6 = st.columns( 6 )
        
        with col1:
            # A coluna 1 nos traz a quantidade de entregadores √∫nicos em nossa base de dados:
            st.markdown( '### Entregadores √önicos' )
            delivery_unique = df1.loc[:, 'Delivery_person_ID'].nunique()
            st.metric(label = "", value = delivery_unique)
            
        with col2:
            # A coluna 2 nos traz a dist√¢ncia m√©dia das entregas em rela√ß√£o √† localiza√ß√£o dos restaurantes
            st.markdown( '### Dist√¢ncia M√©dia' )
            mean_distance = distancia_media( df1 )
            st.metric( label = "", value = f"{mean_distance:.2f} km" )
            
        with col3:
            # A coluna 3 nos traz o tempo m√©dio das entregas quando est√° ocorrendo o Festival:
            st.markdown( '### Tempo m√©dio com Festival' )
            tempo_medio = mean_std_time_festival( df1, funcao = 'mean', Festival = True )
            st.metric( label = "", value = tempo_medio )
            
        with col4:
            # A coluna 4 nos traz o desvio padr√£o m√©dio quando est√° ocorrendo o Festival:
            st.markdown( '### Desvio padr√£o m√©dio com Festival' )
            desvpad = mean_std_time_festival( df1, funcao = 'std', Festival = True )
            st.metric( label = "", value = desvpad )
            
        with col5:
            # A coluna 5 nos traz o tempo m√©dio quando n√£o h√° Festival:
            st.markdown( '### Tempo m√©dio sem Festival' )
            tempo_medio = mean_std_time_festival( df1, funcao = 'mean', Festival = False )
            st.metric( label = "", value = tempo_medio )
            
        with col6:
            # A coluna 6 nos traz o desvio padr√£o m√©dio quando n√£o h√° Festival:
            st.markdown( '### Desvio padr√£o m√©dio sem Festival' )
            desvpad = mean_std_time_festival( df1, funcao = 'std', Festival = False )
            st.metric( label = "", value = desvpad )
            
    with st.container():
        st.markdown( """___""" )
        st.title( "Tempo M√©dio de Entrega por Cidade" )
        fig = section_chart( df1 )
        st.plotly_chart( fig )
        
    with st.container():
        st.markdown( """___""" )
        st.title( "Distribui√ß√£o do Tempo por Cidade" )
        fig = bar_chart( df1 )
        st.plotly_chart( fig )
        
    with st.container():
        st.markdown( """___""" )
        st.title("Distribui√ß√£o do Tempo por Cidade e Densidade de Tr√°fego")
        fig = sunburst_chart( df1 )
        st.plotly_chart( fig )
        
    with st.container():
        st.markdown( """___""" )
        st.title( "Distribui√ß√£o da Dist√¢ncia" )
        df_aux = distance_distribution( df )        
        st.dataframe( df_aux )